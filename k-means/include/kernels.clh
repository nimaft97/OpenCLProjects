#define LOCAL_DATA_ARRAY_LENGTH 1024
#define LOCAL_NUM_CLUSTERS 1024

// function that atomically adds two floats using CAS-loop
// union is adopted to use variables as uint and float interchangably
// the reason is CAS-loop and atomic_add do not support float 
void atomic_add_local(volatile __local float *source, const float operand) {
    union {
        unsigned int intVal;
        float floatVal;
    } newVal;
 
    union {
        unsigned int intVal;
        float floatVal;
    } prevVal;
 
    do {
        prevVal.floatVal = *source;
        newVal.floatVal = prevVal.floatVal + operand;
    } while (atomic_cmpxchg((volatile __local unsigned int *)source, prevVal.intVal, newVal.intVal) != prevVal.intVal);
}

float squaredEuclideanDist(const float element_a, const float element_b)
{
    return (element_a - element_b) * (element_a - element_b);
}

int findClosestCentroid(__local float* local_centroids, const float current_element, const int k)
{
    // initialization
    int centroid_id = 0;
    float dist = squaredEuclideanDist(local_centroids[0], current_element);
    // loop through all centroids and update the variables above
    for (int i = 1; i < k; ++i)
    {
        const float tmp_dist = squaredEuclideanDist(local_centroids[i], current_element);
        if (tmp_dist < dist)
        {
            dist = tmp_dist;
            centroid_id = i;
        }
    }
    return centroid_id;
}

__kernel void kMeans(__global float* data, __global int* cluster_ids,
                     const int n, const int k, const int max_iterations, const float epsilon) 
{
    // global_size = local_size
    const int global_size = get_global_size(0);
    const int global_id = get_global_id(0);

    // Check if the global_id is within the range of the array
    if (global_id >= n)
    {
        return;
    }

    // Define and populate local memory
    // it is assumed that LOCAL_DATA_ARRAY_LENGTH >= n
    __local float local_data[LOCAL_DATA_ARRAY_LENGTH];
    __local float local_centroids[LOCAL_DATA_ARRAY_LENGTH];
    __local int local_cluster_ids[LOCAL_DATA_ARRAY_LENGTH];
    __local float local_cluster_sum[LOCAL_NUM_CLUSTERS];
    __local int local_cluster_size[LOCAL_NUM_CLUSTERS];
    
    // variable local to each work-item (stored on the register) 
    bool vote_to_converge = true;
    int num_iterations = 0;

    // only read data because cluster ids is write only and currently has nothing
    for (int id = global_id; id < n; id += global_size)
    {
        const float current_data = data[id];
        local_data[id] = current_data;

        // choose the first k data items as the first cluster centroids
        if (id < k)
        {
            local_centroids[id] = current_data;
        }
    }

    // set the local flag (on the register) to true if global_id >= k so that it always votes to converge
    // set the local flag to false if global_id < k so that its value can be updated in this __kernel
    if (global_id < k)
    {
        vote_to_converge = false;
    }

    // Synchronize before proceeding
    barrier(CLK_LOCAL_MEM_FENCE);

    // repeat the while loop as long as at least one work-item doesn't vote for convergence
    // or max_iterations iterations are already done
    while (!sub_group_all(vote_to_converge) && num_iterations < max_iterations)
    {
        for (int id = global_id; id < n; id += global_size)
        {
            const float current_element = local_data[id];
            const int cluster_id = findClosestCentroid(local_centroids, current_element, k);
            atomic_add_local(&local_cluster_sum[cluster_id], current_element);
            atomic_add(&local_cluster_size[cluster_id], 1);
            local_cluster_ids[id] = cluster_id;
        }
        // synchronize before concatenating data
        barrier(CLK_LOCAL_MEM_FENCE);

        vote_to_converge = true;

        for (int cluster_id = global_id; cluster_id < k; cluster_id += global_size)
        {
            const float cluster_sum = local_cluster_sum[cluster_id];
            const float cluster_size = (float)local_cluster_size[cluster_id];
            const float cluster_centroid = cluster_sum / cluster_size;
            if (squaredEuclideanDist(cluster_centroid, local_centroids[cluster_id]) > epsilon * epsilon)
            {
                vote_to_converge = false;
            }
            local_centroids[cluster_id] = cluster_centroid;
        }

        num_iterations++;
        barrier(CLK_LOCAL_MEM_FENCE);
    }

    // Update the global memory with the valid copy of local memory
    // only write to cluster_ids because data has not changed
    for (int id = global_id; id < n; id += global_size)
    {
        cluster_ids[id] = local_cluster_ids[id];
    }
}
