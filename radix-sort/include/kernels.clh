#define LOCAL_DATA_ARRAY_LENGTH 1024
#define MAX_WORK_GROUP_SIZE 512
#define NUM_BUCKETS 10  // one bucket for each digit (0, 1, 2, ..., 9)

__kernel void radixSort(__global int* data, const int n, const int max_digit) 
{
    // global_size = local_size
    // Work-group size
    const int global_size = get_global_size(0);
    const int global_id = get_global_id(0);

    // Check if the global_id is within the range of the array
    if (global_id >= n)
    {
        return;
    }

    // Define and populate local memory
    // it is assumed that LOCAL_DATA_ARRAY_LENGTH >= n and n is a power of two
    __local int local_data[LOCAL_DATA_ARRAY_LENGTH];
    for (int i = global_id; i < n; i += global_size)
    {
        // create two copies of global memory
        local_data[i] = data[i];
    }
    // Synchronize before proceeding
    barrier(CLK_LOCAL_MEM_FENCE);
    
    for (int digit_idx = 0; digit_idx < NUM_BUCKETS; ++digit_idx)
    {
        // shared memory initialized to zero so that each thread can write to isolated elements
        // it then will be used as an input to prefix-sum (once for each bucket)
        __local int partial_freq[NUM_BUCKETS][MAX_WORK_GROUP_SIZE];
        barrier(CLK_LOCAL_MEM_FENCE);
    }
    // count and update bucket array (buckket_arr[#buckets][#threads])
    // prefix sum #bucket times
    // populate the second local array, place numbers in order
    // repeat until all digits are considered

    // Update the global memory with the valid copy of local memory
    for (int i = global_id; i < n; i += global_size)
    {
        data[i] = local_data[i];
    }
}
