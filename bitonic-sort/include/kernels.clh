#define LOCAL_DATA_ARRAY_LENGTH 1024

__kernel void bitonicSort(__global int* data, const int n) 
{
    // global_size = local_size
    // Work-group size
    const int global_size = get_global_size(0);
    const int global_id = get_global_id(0);

    // Check if the global_id is within the range of the array
    if (global_id >= n)
    {
        return;
    }

    // Define and populate local memory
    // it is assumed that LOCAL_DATA_ARRAY_LENGTH >= n and n is a power of two
    __local int local_data[LOCAL_DATA_ARRAY_LENGTH];
    for (int i = global_id; i < n; i += global_size)
    {
        // create two copies of global memory
        local_data[i] = data[i];
    }
    // Synchronize before proceeding
    barrier(CLK_LOCAL_MEM_FENCE);
    
    for (int seq_len = 2; seq_len <= n; seq_len *= 2)
    {
        for (int bitonic_seq_len = seq_len/2; bitonic_seq_len > 0; bitonic_seq_len /= 2)
        {
            for (int id = global_id; id < n; id += global_size)
            {
                int to_compare_id = (id ^ bitonic_seq_len);
                if (to_compare_id > id)
                {
                    bool first_half = ((id & seq_len) == 0);
                    if (first_half && (local_data[id] > local_data[to_compare_id]) ||
                        (!first_half) && (local_data[id] < local_data[to_compare_id]))
                    {
                        // swap elements
                        int tmp = local_data[id];
                        local_data[id] = local_data[to_compare_id];
                        local_data[to_compare_id] = tmp;
                    }
                }
            }
            // synchronize
            barrier(CLK_LOCAL_MEM_FENCE);
        }
        // Synchronize
        barrier(CLK_LOCAL_MEM_FENCE);
    }

    // no need to synchronize again because it is already done in the outer loop above

    // Update the global memory with the valid copy of local memory
    for (int i = global_id; i < n; i += global_size)
    {
        data[i] = local_data[i];
    }
}
