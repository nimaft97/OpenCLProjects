#define LOCAL_DATA_ARRAY_LENGTH 1024
#define LOCAL_NUM_CLUSTERS 1024

__kernel void matrixTranspose(__global float* matrix, const int dim1, const int dim2) 
{
    // global_size = local_size
    const int global_size = get_global_size(0);
    const int global_id = get_global_id(0);

    if (global_id >= dim1 * dim2){
        return;
    }

    __local float local_data[LOCAL_DATA_ARRAY_LENGTH];
    for (int idx = global_id; idx < dim1 * dim2; idx += global_size)
    {
        // copy global to local
        local_data[idx] = matrix[idx];
    }
    barrier(CLK_LOCAL_MEM_FENCE);

    for (int idx = global_id; idx < dim1 * dim2; idx += global_size)
    {
        const int row = idx / dim2;
        const int col = idx - (row * dim2);
        const int new_idx = col * dim1 + row;
        matrix[new_idx] = local_data[idx];
    }
    // no need to put a barrier because everything syncs when the kernel ends
}

__kernel void matrixMul(__global float* matrix1, __global float* matrix2, __global float* matrix3,
                        const int dim1_1, const int dim1_2, const int dim2_2) 
{
}
